var Lambda=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=33)}([function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(20),e),o(r(56),e),o(r(21),e),o(r(26),e),o(r(57),e)},function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(34),e),o(r(13),e),o(r(14),e),o(r(22),e),o(r(15),e),o(r(35),e),o(r(16),e),o(r(36),e),o(r(37),e),o(r(38),e),o(r(6),e),o(r(39),e),o(r(7),e),o(r(40),e),o(r(9),e),o(r(2),e),o(r(24),e),o(r(12),e),o(r(3),e),o(r(25),e),o(r(41),e),o(r(51),e),o(r(52),e),o(r(53),e),o(r(54),e),o(r(8),e),o(r(23),e),o(r(55),e)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.poly=void 0;var n=r(4),o=r(8),u=r(14),i=r(12),a=r(6),c=r(7);e.poly=function(t){if(void 0===t)return c.noop;var e=typeof t;if(("object"===e||"function"===e)&&null!=t)switch(Reflect.get(t,n.TYPE)){case"rule":return t;case"match":return a.lhs((function(){return t}));case"context":return u.context((function(){return t}));case"contexts":return i.replace((function(){return t}))}return o.value(t)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.rhs=void 0;var n=r(0),o=r(6);e.rhs=function(t){return o.lhs((function(e){return n.match(e,t(e))}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TYPE=e.VAL=e.RNG=void 0,e.RNG=Symbol("RNG"),e.VAL=Symbol("VAL"),e.TYPE=Symbol("TYPE")},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lhs=void 0;var n=r(4);e.lhs=function(t){var e;return(e={})[n.TYPE]="rule",e.match=t,e}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.noop=void 0;var n=r(14);e.noop=n.context((function(t){return t}))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.value=void 0;var n=r(13),o=r(4);e.value=function(t){return n.append((function(){var e;return(e={})[o.VAL]=t,e}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.pipe=void 0;var u=r(0),i=r(12),a=r(3),c=r(16),l=r(7),f=r(2);e.pipe=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return a.rhs((function(r){if(!t.length)return l.noop;var a=n(t),s=a[0],v=a.slice(1),d=u.match(r,f.poly(s));if(d.weight<=0)return l.noop;var p=d.apply(),h=o(p).map((function(t){return i.replace((function(){return u.apply(t,e.pipe.apply(void 0,o(v)))}))}));return 1===p.arity?h[0]:c.fork.apply(void 0,o(h))}))}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.replace=void 0;var n=r(4),o=r(6);e.replace=function(t){return o.lhs((function(e){var r;return(r={})[n.TYPE]="match",r.weight=1,r.apply=function(){return t(e)},r}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.append=void 0;var n=r(14);e.append=function(t){return n.context((function(e){var r=t(e),n=Object.create(e);return Reflect.ownKeys(r).forEach((function(t){var e=Reflect.get(r,t);Object.defineProperty(n,t,{get:function(){return e}})})),n}))}},function(t,e,r){"use strict";var n=this&&this.__generator||function(t,e){var r,n,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&u[0]?n.return:u[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,u[1])).done)return o;switch(n=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,n=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=e.call(t,i)}catch(t){u=[6,t],n=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.context=void 0;var o=r(4),u=r(12);e.context=function(t){return u.replace((function(e){var r;return(r={})[o.TYPE]="contexts",r.arity=1,r[Symbol.iterator]=function(){return n(this,(function(r){switch(r.label){case 0:return[4,t(e)];case 1:return r.sent(),[2]}}))},r}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fail=void 0;var n=r(6),o=r(4),u=r(2),i=r(0);e.fail=function(t){return n.lhs((function(e){var r;return(r={})[o.TYPE]="match",r.weight=0,r.apply=function(){throw new Error(t?i.evaluate(e,u.poly(t)):"Trying to apply failed match!")},r}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.fork=void 0;var u=r(0),i=r(22),a=r(2);e.fork=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.contexts((function(e){return t.map((function(t){return u.match(e,a.poly(t))})).filter((function(t){return t.weight>0})).reduce((function(t,e){return o(t,e.apply())}),[])}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.eq=void 0;var u=r(1),i=r(0);e.eq=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return u.lambda((function(e){return i.evaluate(e)===i.evaluate(e,u.pipe.apply(void 0,o(t)))}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.or=void 0;var n=r(1),o=r(0);e.or=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.lambda((function(e){return t.reduce((function(t,r){return t||o.evaluate(e,r)}),!1)}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sum=void 0;var n=r(1),o=r(0);e.sum=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.lambda((function(e){return t.reduce((function(t,r){return t+o.evaluate(e,r)}),0)}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.apply=void 0;var n=r(21);e.apply=function(t,e){return n.match(t,e).apply()}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.match=void 0;var n=r(1);e.match=function(t,e){return n.poly(e).match(t)}},function(t,e,r){"use strict";var n=this&&this.__generator||function(t,e){var r,n,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&u[0]?n.return:u[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,u[1])).done)return o;switch(n=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,n=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=e.call(t,i)}catch(t){u=[6,t],n=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}},o=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.contexts=void 0;var u=r(4),i=r(12);e.contexts=function(t){return i.replace((function(e){var r;return(r={})[u.TYPE]="contexts",r.arity=0,r[Symbol.iterator]=function(){var r,u,i,a,c;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,7]),r=o(t(e)),u=r.next(),n.label=1;case 1:return u.done?[3,4]:[4,u.value];case 2:n.sent(),n.label=3;case 3:return u=r.next(),[3,1];case 4:return[3,7];case 5:return i=n.sent(),a={error:i},[3,7];case 6:try{u&&!u.done&&(c=r.return)&&c.call(r)}finally{if(a)throw a.error}return[7];case 7:return[2]}}))},r}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.weight=void 0;var n=r(6),o=r(0),u=r(2);e.weight=function(t,e){return n.lhs((function(r){var n=o.match(r,u.poly(e));return Object.assign(n,{weight:o.evaluate(r,u.poly(t))*n.weight})}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.random=void 0;var n=r(8),o=r(3),u=r(4);e.random=o.rhs((function(t){var e=Reflect.has(t,u.RNG)?Reflect.get(t,u.RNG)():Math.random();return n.value(e)}))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.rng=void 0;var n=r(13),o=r(4);e.rng=function(t){return n.append((function(){var e;return(e={})[o.RNG]=t,e}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.project=void 0,e.project=function(t,e){return 1===t.arity?e(o(t)[0]):o(t).reduce((function(t,r){return o(t,[e(r)])}),[])}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.frac=void 0;var n=r(1),o=r(0);e.frac=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return n.lambda((function(r){return e.reduce((function(t,e){return t/o.evaluate(r,e)}),o.evaluate(r,t))}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.gt=void 0;var n=r(1),o=r(0);e.gt=function(t){return n.lambda((function(e){return o.evaluate(e)>o.evaluate(e,t)}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lerp=void 0;var n=r(1),o=r(0);e.lerp=function(t,e,r){return n.lambda((function(n){var u=o.evaluate(n,t),i=o.evaluate(n,e);return i+u*(o.evaluate(n,r)-i)}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lt=void 0;var n=r(1),o=r(0);e.lt=function(t){return n.lambda((function(e){return o.evaluate(e)<o.evaluate(e,t)}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.negate=void 0;var n=r(1),o=r(0);e.negate=function(t){return n.lambda((function(e){return-o.evaluate(e,t)}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.prod=void 0;var n=r(1),o=r(0);e.prod=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.lambda((function(e){return t.reduce((function(t,r){return t*o.evaluate(e,r)}),1)}))}},function(t,e,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},u=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(o(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.init=void 0;var i=r(0),a=r(0),c=r(1),l=r(1),f=r(58),s=r(69);e.init=function(t){var e=n({before:function(){return l.noop},after:function(){return l.noop},log:function(){throw new Error("No log function specified.")},handle:function(){throw new Error("No result handler specified.")}},t||{});return n(n(n(n(n({},i),c),f),s),{log:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return l.action((function(r){e.log(String(a.evaluate(r,l.pipe.apply(void 0,u(t)))))}))},run:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=a.evaluate(a.root,l.pipe.apply(void 0,u([l.lambda(e.before)],t,[l.lambda(e.after)])));return e.handle(n),n}})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.action=void 0;var n=r(3),o=r(7);e.action=function(t){return n.rhs((function(e){return t(e),o.noop}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.first=void 0;var u=r(6),i=r(15),a=r(0),c=r(3),l=r(2);e.first=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return c.rhs((function(r){if(0===t.length)return i.fail("No succeeding first option.");var c=n(t),f=c[0],s=c.slice(1),v=a.match(r,l.poly(f));return v.weight<=0?e.first.apply(void 0,o(s)):u.lhs((function(){return v}))}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.get=void 0;var u=r(3),i=r(9),a=r(0);e.get=new Proxy((function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return u.rhs((function(r){return i.pipe.apply(void 0,o([r[a.evaluate(r,t)]],e))}))}),{get:function(t,e){return Object.assign((function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return t.apply(void 0,o([e],r))}),t(e))}})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.it=void 0;var n=r(7);e.it=n.noop},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lambda=void 0;var n=r(3),o=r(2);e.lambda=function(t){return n.rhs((function(e){return o.poly(t(e))}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.loop=void 0;var n=r(3),o=r(0),u=r(7),i=r(9),a=r(8),c=r(2);e.loop=function(t,r){return n.rhs((function(n){var l=o.evaluate(n,c.poly(t));return l<=0?u.noop:i.pipe(c.poly(r),e.loop(a.value(l-1),r))}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.pick=void 0;var u=r(15),i=r(6),a=r(23),c=r(8),l=r(3),f=r(0),s=r(24),v=r(2),d=function(t){return t[t.length-1]};e.pick=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return l.rhs((function(e){var r=t.map((function(t){return f.match(e,v.poly(t))})),n=r.map((function(t){return Math.max(0,t.weight)})).reduce((function(t,e){return o(t,[d(t)+e])}),[0]),l=d(n);if(0===l)return u.fail("No options to pick from.");var p=l*f.evaluate(e,s.random),h=r[n.slice(1).findIndex((function(t){return p<t}))];return a.weight(c.value(1/h.weight),i.lhs((function(){return h})))}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.seed=void 0;var n=r(3),o=r(0),u=r(25),i=r(2),a=r(42);e.seed=function(t){return n.rhs((function(e){return u.rng(a(String(o.evaluate(e,i.poly(t)))))}))}},function(t,e,r){var n=r(43),o=r(44),u=r(45),i=r(46),a=r(47),c=r(48),l=r(49);l.alea=n,l.xor128=o,l.xorwow=u,l.xorshift7=i,l.xor4096=a,l.tychei=c,t.exports=l},function(t,e,r){(function(t){var n;!function(t,o,u){function i(t){var e,r=this,n=(e=4022871197,function(t){t=String(t);for(var r=0;r<t.length;r++){var n=.02519603282416938*(e+=t.charCodeAt(r));n-=e=n>>>0,e=(n*=e)>>>0,e+=4294967296*(n-=e)}return 2.3283064365386963e-10*(e>>>0)});r.next=function(){var t=2091639*r.s0+2.3283064365386963e-10*r.c;return r.s0=r.s1,r.s1=r.s2,r.s2=t-(r.c=0|t)},r.c=1,r.s0=n(" "),r.s1=n(" "),r.s2=n(" "),r.s0-=n(t),r.s0<0&&(r.s0+=1),r.s1-=n(t),r.s1<0&&(r.s1+=1),r.s2-=n(t),r.s2<0&&(r.s2+=1),n=null}function a(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function c(t,e){var r=new i(t),n=e&&e.state,o=r.next;return o.int32=function(){return 4294967296*r.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,n&&("object"==typeof n&&a(n,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=c:r(5)&&r(11)?void 0===(n=function(){return c}.call(e,r,e,o))||(o.exports=n):this.alea=c}(0,t,r(5))}).call(this,r(10)(t))},function(t,e,r){(function(t){var n;!function(t,o,u){function i(t){var e=this,r="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:r+=t;for(var n=0;n<r.length+64;n++)e.x^=0|r.charCodeAt(n),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function c(t,e){var r=new i(t),n=e&&e.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=r.next,o.quick=o,n&&("object"==typeof n&&a(n,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=c:r(5)&&r(11)?void 0===(n=function(){return c}.call(e,r,e,o))||(o.exports=n):this.xor128=c}(0,t,r(5))}).call(this,r(10)(t))},function(t,e,r){(function(t){var n;!function(t,o,u){function i(t){var e=this,r="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:r+=t;for(var n=0;n<r.length+64;n++)e.x^=0|r.charCodeAt(n),n==r.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function c(t,e){var r=new i(t),n=e&&e.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=r.next,o.quick=o,n&&("object"==typeof n&&a(n,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=c:r(5)&&r(11)?void 0===(n=function(){return c}.call(e,r,e,o))||(o.exports=n):this.xorwow=c}(0,t,r(5))}).call(this,r(10)(t))},function(t,e,r){(function(t){var n;!function(t,o,u){function i(t){var e=this;e.next=function(){var t,r,n=e.x,o=e.i;return t=n[o],r=(t^=t>>>7)^t<<24,r^=(t=n[o+1&7])^t>>>10,r^=(t=n[o+3&7])^t>>>3,r^=(t=n[o+4&7])^t<<7,t=n[o+7&7],r^=(t^=t<<13)^t<<9,n[o]=r,e.i=o+1&7,r},function(t,e){var r,n=[];if(e===(0|e))n[0]=e;else for(e=""+e,r=0;r<e.length;++r)n[7&r]=n[7&r]<<15^e.charCodeAt(r)+n[r+1&7]<<13;for(;n.length<8;)n.push(0);for(r=0;r<8&&0===n[r];++r);for(8==r?n[7]=-1:n[r],t.x=n,t.i=0,r=256;r>0;--r)t.next()}(e,t)}function a(t,e){return e.x=t.x.slice(),e.i=t.i,e}function c(t,e){null==t&&(t=+new Date);var r=new i(t),n=e&&e.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=r.next,o.quick=o,n&&(n.x&&a(n,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=c:r(5)&&r(11)?void 0===(n=function(){return c}.call(e,r,e,o))||(o.exports=n):this.xorshift7=c}(0,t,r(5))}).call(this,r(10)(t))},function(t,e,r){(function(t){var n;!function(t,o,u){function i(t){var e=this;e.next=function(){var t,r,n=e.w,o=e.X,u=e.i;return e.w=n=n+1640531527|0,r=o[u+34&127],t=o[u=u+1&127],r^=r<<13,t^=t<<17,r^=r>>>15,t^=t>>>12,r=o[u]=r^t,e.i=u,r+(n^n>>>16)|0},function(t,e){var r,n,o,u,i,a=[],c=128;for(e===(0|e)?(n=e,e=null):(e+="\0",n=0,c=Math.max(c,e.length)),o=0,u=-32;u<c;++u)e&&(n^=e.charCodeAt((u+32)%e.length)),0===u&&(i=n),n^=n<<10,n^=n>>>15,n^=n<<4,n^=n>>>13,u>=0&&(i=i+1640531527|0,o=0==(r=a[127&u]^=n+i)?o+1:0);for(o>=128&&(a[127&(e&&e.length||0)]=-1),o=127,u=512;u>0;--u)n=a[o+34&127],r=a[o=o+1&127],n^=n<<13,r^=r<<17,n^=n>>>15,r^=r>>>12,a[o]=n^r;t.w=i,t.X=a,t.i=o}(e,t)}function a(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function c(t,e){null==t&&(t=+new Date);var r=new i(t),n=e&&e.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=r.next,o.quick=o,n&&(n.X&&a(n,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=c:r(5)&&r(11)?void 0===(n=function(){return c}.call(e,r,e,o))||(o.exports=n):this.xor4096=c}(0,t,r(5))}).call(this,r(10)(t))},function(t,e,r){(function(t){var n;!function(t,o,u){function i(t){var e=this,r="";e.next=function(){var t=e.b,r=e.c,n=e.d,o=e.a;return t=t<<25^t>>>7^r,r=r-n|0,n=n<<24^n>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^r,e.c=r=r-n|0,e.d=n<<16^r>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):r+=t;for(var n=0;n<r.length+20;n++)e.b^=0|r.charCodeAt(n),e.next()}function a(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function c(t,e){var r=new i(t),n=e&&e.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=r.next,o.quick=o,n&&("object"==typeof n&&a(n,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=c:r(5)&&r(11)?void 0===(n=function(){return c}.call(e,r,e,o))||(o.exports=n):this.tychei=c}(0,t,r(5))}).call(this,r(10)(t))},function(t,e,r){var n;!function(o,u,i){var a,c=i.pow(256,6),l=i.pow(2,52),f=2*l;function s(t,e,r){var n=[],s=p(function t(e,r){var n,o=[],u=typeof e;if(r&&"object"==u)for(n in e)try{o.push(t(e[n],r-1))}catch(t){}return o.length?o:"string"==u?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,h(u)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(256):(t=new Uint8Array(256),(o.crypto||o.msCrypto).getRandomValues(t)),h(t)}catch(t){var e=o.navigator,r=e&&e.plugins;return[+new Date,o,r,o.screen,h(u)]}}():t,3),n),y=new v(n),b=function(){for(var t=y.g(6),e=c,r=0;t<l;)t=256*(t+r),e*=256,r=y.g(1);for(;t>=f;)t/=2,e/=2,r>>>=1;return(t+r)/e};return b.int32=function(){return 0|y.g(4)},b.quick=function(){return y.g(4)/4294967296},b.double=b,p(h(y.S),u),(e.pass||r||function(t,e,r,n){return n&&(n.S&&d(n,y),t.state=function(){return d(y,{})}),r?(i.random=t,e):t})(b,s,"global"in e?e.global:this==i,e.state)}function v(t){var e,r=t.length,n=this,o=0,u=n.i=n.j=0,i=n.S=[];for(r||(t=[r++]);o<256;)i[o]=o++;for(o=0;o<256;o++)i[o]=i[u=255&u+t[o%r]+(e=i[o])],i[u]=e;(n.g=function(t){for(var e,r=0,o=n.i,u=n.j,i=n.S;t--;)e=i[o=255&o+1],r=256*r+i[255&(i[o]=i[u=255&u+e])+(i[u]=e)];return n.i=o,n.j=u,r})(256)}function d(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function p(t,e){for(var r,n=t+"",o=0;o<n.length;)e[255&o]=255&(r^=19*e[255&o])+n.charCodeAt(o++);return h(e)}function h(t){return String.fromCharCode.apply(0,t)}if(p(i.random(),u),t.exports){t.exports=s;try{a=r(50)}catch(t){}}else void 0===(n=function(){return s}.call(e,r,e,t))||(t.exports=n)}("undefined"!=typeof self?self:this,[],Math)},function(t,e){},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.set=void 0;var u=r(9),i=r(0),a=r(13),c=r(2);e.set=new Proxy((function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return a.append((function(r){var n;return(n={})[i.evaluate(r,c.poly(t))]=i.evaluate(r,u.pipe.apply(void 0,o(e))),n}))}),{get:function(t,e){return Object.assign((function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return t.apply(void 0,o([e],r))}),t(e,null))}})},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.times=void 0;var u=r(16),i=r(3),a=r(8),c=r(0),l=r(2),f=r(9);e.times=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return i.rhs((function(r){return u.fork.apply(void 0,o(new Array(c.evaluate(r,l.poly(t))).fill(0).map((function(t,r){return f.pipe.apply(void 0,o([a.value(r)],e))}))))}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.unless=void 0;var n=r(3),o=r(0),u=r(7),i=r(2);e.unless=function(t,e,r){return n.rhs((function(n){return i.poly(o.evaluate(n,i.poly(t))?r||u.noop:e)}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.val=void 0;var u=r(4),i=r(9),a=r(13),c=r(0);e.val=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return a.append((function(e){var r;return(r={})[u.VAL]=c.evaluate(e,i.pipe.apply(void 0,o(t))),r}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.when=void 0;var n=r(0),o=r(3),u=r(7),i=r(2);e.when=function(t,e,r){return o.rhs((function(o){return i.poly(n.evaluate(o,i.poly(t))?e:r||u.noop)}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.evaluate=void 0;var n=r(4),o=r(26),u=r(20);e.evaluate=function(t,e){return o.project(u.apply(t,e),(function(t){return Reflect.has(t,n.VAL)?Reflect.get(t,n.VAL):null}))}},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.root=void 0;var o=r(4);e.root=((n={})[o.TYPE]="context",n[o.RNG]=function(){return Math.random()},n)},function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(59),e),o(r(60),e),o(r(17),e),o(r(61),e),o(r(27),e),o(r(28),e),o(r(62),e),o(r(29),e),o(r(30),e),o(r(63),e),o(r(64),e),o(r(65),e),o(r(66),e),o(r(31),e),o(r(18),e),o(r(67),e),o(r(32),e),o(r(19),e),o(r(68),e)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.and=void 0;var n=r(1),o=r(0);e.and=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.lambda((function(e){return t.reduce((function(t,r){return t&&o.evaluate(e,r)}),!0)}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.div=void 0;var u=r(27),i=r(1);e.div=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return u.frac.apply(void 0,o([i.it],t))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.floor=void 0;var n=r(0),o=r(1);e.floor=function(t){return o.lambda((function(e){return Math.floor(n.evaluate(e,t))}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.gte=void 0;var n=r(28),o=r(17),u=r(18);e.gte=function(t){return u.or(o.eq(t),n.gt(t))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lte=void 0;var n=r(17),o=r(18),u=r(30);e.lte=function(t){return o.or(n.eq(t),u.lt(t))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.max=void 0;var u=r(0),i=r(1);e.max=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.lambda((function(e){return Math.max.apply(Math,o(t.map((function(t){return u.evaluate(e,t)}))))}))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.minus=void 0;var u=r(1),i=r(19),a=r(31);e.minus=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.sum(u.it,a.negate(i.sum.apply(void 0,o(t))))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.mul=void 0;var u=r(1),i=r(32);e.mul=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.prod.apply(void 0,o([u.it],t))}},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.plus=void 0;var u=r(1),i=r(19);e.plus=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.sum.apply(void 0,o([u.it],t))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.uniform=void 0;var n=r(1),o=r(29);e.uniform=function(t,e){return o.lerp(n.random,t,e)}},function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(70),e),o(r(71),e),o(r(72),e)},function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,u=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=u.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return i},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.join=void 0;var u=r(0),i=r(1);e.join=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.lambda((function(e){return u.evaluate(e,i.fork.apply(void 0,o(t))).join("")}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lowerCase=void 0;var n=r(0),o=r(1);e.lowerCase=o.lambda((function(t){return String(n.evaluate(t)).toLowerCase()}))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.upperCase=void 0;var n=r(0),o=r(1);e.upperCase=o.lambda((function(t){return String(n.evaluate(t)).toUpperCase()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,